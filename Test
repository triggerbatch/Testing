def serialize_tools(self, tools):
    serialized = []
    for tool in tools:
        print("TOOLLLL", tool)
        
        properties = {}
        
        # Handle $defs case
        if '$defs' in tool.inputSchema:
            for key, value in tool.inputSchema['properties'].items():
                if '$ref' in value:
                    ref_key = value['$ref'].split('/')[-1]
                    if ref_key in tool.inputSchema['$defs']:
                        properties[key] = {
                            "type": tool.inputSchema['$defs'][ref_key].get('type', 'string'),
                            "description": value.get('description') or key  # FIX: Never None
                        }
                else:
                    properties[key] = {
                        "type": value.get('type', 'string'),
                        "description": value.get('description') or key  # FIX: Never None
                    }
        else:
            # Original case
            for key, value in tool.inputSchema.get('properties', {}).items():
                properties[key] = {
                    "type": value.get('type', 'string'),
                    "description": value.get('description') or key  # FIX: Never None
                }
        
        # FIX: Add validation - Azure rejects None values
        serialized_tool = {
            "type": "function",
            "function": {
                "name": tool.name or "unknown_tool",  # FIX: Never None
                "description": tool.description or f"Tool: {tool.name}",  # FIX: Never None
                "parameters": {
                    "type": "object",
                    "properties": properties if properties else {},  # FIX: Never None
                    "required": tool.inputSchema.get('required', [])  # FIX: Never None
                }
            }
        }
        
        serialized.append(serialized_tool)
    
    return serialized
